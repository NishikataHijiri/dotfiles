" Maintainer:   Nishikata Hijiri
" Last Modified: 2015-08-22T22:05:27

""" Release autogroup in CustomAutoCmd
augroup CustomAutoCmd
   autocmd!
augroup END
 
" ----------------------------------------------- "
" Start Neobundle Settings.
" ----------------------------------------------- "
filetype off

let s:noplugin = 0
let s:bundle_root = expand('~/.vim/bundle')
let s:neobundle_root = s:bundle_root . '/neobundle.vim'

if has('vim_starting')
   execute "set runtimepath+=" . s:neobundle_root
endif

call neobundle#begin(s:bundle_root)

NeoBundleFetch 'Shougo/neobundle.vim'


if has('lua')
   NeoBundleLazy 'Shougo/neocomplete.vim', {
            \ 'depends' : 'Shougo/vimproc',
            \ "autoload": {"insert": 1},
            \ }
endif

NeoBundle 'Shougo/neomru.vim', {
         \ 'depends' : 'Shougo/unite.vim'
         \ }


let s:hooks = neobundle#get_hooks("neocomplete.vim")
function! s:hooks.on_source(bundle)
   let g:acp_enableAtStartup = 0
   let g:neocomplete#sources#syntax#min_keyword_length = 3
   let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

   let g:neocomplete#sources#dictionary#dictionaries = {
                \ 'default': '',
                \ 'vimshell': $HOME.'/.vimshell_hist',
                \ 'scheme'  : $HOME.'/.gosh_completions'
                \}
   if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
   endif
   let g:neocomplete#keyword_patterns['default'] = '\h\w*'
endfunction


NeoBundle "thinca/vim-template"
autocmd CustomAutoCmd User plugin-template-loaded call s:template_keywords()
function! s:template_keywords()
    silent! %s/<+DATE+>/\=strftime('%m-%d-%Y')/g
    silent! %s/<+FILENAME+>/\=expand('%:r')/g
endfunction

autocmd CustomAutoCmd User plugin-template-loaded
            \   if search('<+CURSOR+>')
            \ |     silent! execute 'normal! "_da>'
            \ | endif

NeoBundleLazy "sjl/gundo.vim", {
            \ "autoload": {
            \   "commands": ['GundoToggle'],
            \}}

NeoBundleLazy "vim-scripts/TaskList.vim", {
            \ "autoload": {
            \   "mapoings": ['<Plug>TaskList'],
            \}}
nmap <Leader>T <Plug>TaskList

NeoBundle 'marijnh/tern_for_vim', {
    \ 'build': {
    \   'others': 'npm install'
    \}}

NeoBundle 'scrooloose/nerdtree'
NeoBundle 'Townk/vim-autoclose'
NeoBundle 'tpope/vim-fugitive'

NeoBundleLazy 'Shougo/vimshell', {
   \ 'depends' : 'Shougo/vimproc',
   \ 'autoload' : {
   \     'commands' : [{ 'name' : 'VimShell', 'complete' : 'customlist,vimshell#complete' },
   \                    'VimShellExecute',  'VimShellInteractive', 
   \                    'VimShellTerminal', 'VimShellPop'],
   \     'mappings' : ['<Plug>(vimshell_switch)']
   \ }}

""" Unite.vim """
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-build'
NeoBundle 'Shougo/unite-session'
NeoBundle 'Shougo/unite-outline'

NeoBundle 'tsukkee/unite-help'
NeoBundle 'tsukkee/unite-tag'
NeoBundle 'thinca/vim-unite-history'
NeoBundle 'sgur/unite-qf'

NeoBundle 'ujihisa/unite-gem'
NeoBundle 'basyura/unite-rails'
NeoBundle 'nobeans/unite-grails'
NeoBundle 'oppara/vim-unite-cake'


" Completion packages
NeoBundle 'Shougo/neosnippet', {
         \ 'depends' : 'Shougo/neosnippet-snippets',
         \ 'autoload' : {
         \     'insert' : 1,
         \     'filetypes' : 'snippet',
         \ }}

NeoBundle 'Shougo/neosnippet-snippets'

let g:neosnippet#enable_snipmate_compatibility = 1


" Ruby and Rails settings
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-endwise'

NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'vim-scripts/AnsiEsc.vim'
NeoBundle 'tomtom/tcomment_vim'

NeoBundle 'Shougo/vimproc', {
\	'build' : {
\		'mac' : 'make -f make_mac.mak',
\		'unix' : 'make -f make_unix.mak',
\	},
\}

NeoBundleLazy "lambdalisue/vim-django-support", {
            \ "autoload": {
            \   "filetype": ["python", "python3", "djangohtml"]
            \ }}

NeoBundleLazy 'davidhalter/jedi-vim', {
            \ "autoload": {
            \   "filetype": ["python", "python3", "djangohtml"],
            \ }, 
            \ "build": {
            \   "mac": "pip install jedi",
            \   "unix": "pip install jedi",
            \ }}

let s:hooks = neobundle#get_hooks("jedi-vim")
function! s:hooks.on_source(bundle)
    let g:jedi#auto_vim_configuration =  0
    let g:jedi#rename_command = '<Leader>R'
    let g:jedi#goto_command = '<Leader>G'
    let g:jedi#completions_enabled=0
    let g:jedi#popup_on_dot = 1
    let g:jedi#auto_initialization = 1
    autocmd CustomAutoCmd FileType python setlocal omnifunc=g:jedi#auto_initialization#complete
    autocmd CustomAutoCmd FileType python let b:did_ftplugin = 1
endfunction


autocmd CustomAutoCmd FileType python setlocal completeopt-=preview


" QuickRun plug-in
NeoBundleLazy "thinca/vim-quickrun", {
            \ "autoload": {
            \   "mappings": ['nxo', '<Plug>(quickrun)'],
            \}}

let s:hooks = neobundle#get_hooks("vim-quickrun")
function! s:hooks.on_source(bundle)
    let g:quickrun_config = {
             \	"_" : {
             \ "outputter/buffer/split" : "botright 10sp",
             \ "outputter/buffer/close_on_empty" : 1,
             \ "runner" : "vimproc",
             \ "runner/vimproc/updatetime" : 60
             \ },
             \}

    let g:quickrun_config.tex = {'command' : 'autolatex'}
    let g:quickrun_config.python = {'command' : 'python3'}

    let g:quickrun_config['html'] = {
                \ 'command': 'open',
                \ 'exec' : '%c %s',
                \ 'outputter' : 'browser'
                \ }


    if executable("clang++")
       let g:syntastic_cpp_compiler = 'clang++'
       let g:syntastic_cpp_compiler_options = '--std=c++1y --stdlib=libc++'

       let g:quickrun_config['cpp/clang++14'] = {
                \ 'type': 'cpp/clang++',
                \ 'cmdopt': '--std=c++14 --stdlib=libc++',
                \}

       let g:quickrun_config['cpp'] = {'type': 'cpp/clang++14'}
    endif
endfunction


" web development env
NeoBundleLazy 'mattn/emmet-vim', {
            \ 'autoload' : {
            \   'filetypes' : 
            \       ['html', 'html5', 'eruby', 'jsp', 'xml', 'css', 'scss', 'coffee'],
            \   'commands' : ['<Plug>ZenCodingExpandNormal']
            \ }}

let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = {
            \ 'lang' : 'en',
            \ 'html' : {
            \   'filters' : 'html',
            \ },
            \ 'css' : {
            \   'filters' : 'fc',
            \ },
            \ 'php' : {
            \   'extends' : 'html',
            \   'filters' : 'html',
            \ },
            \}
let g:user_emmet_leader_key = '<C-z>'

augroup EmmetVim
    autocmd!
    autocmd FileType html,css,php let g:user_emmet_settings.indentation = '   '[:&tabstop]
augroup END

NeoBundle 'open-browser.vim'
NeoBundle 'mattn/webapi-vim'
NeoBundle 'tell-k/vim-browsereload-mac'
NeoBundle 'hail2u/vim-css3-syntax'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'tpope/vim-endwise.git' 
NeoBundle 'ruby-matchit'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'tyru/caw.vim.git'
" NeoBundle 'vim-scripts/dbext.vim'


autocmd CustomAutoCmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd CustomAutoCmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd CustomAutoCmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
"autocmd CustomAutoCmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd CustomAutoCmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
 

NeoBundleCheck
call neobundle#end()
" Required:
filetype plugin indent on

let g:clang_user_options = '-std=c++11'
let g:clang_auto_select = 0
let g:clang_complete_auto = 0
let g:clang_use_library = 1


let g:neocomplete#enable_at_startup  = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case  = 1
let g:neocomplete#enable_camel_case  = 1
let g:neocomplete#enable_fuzzy_completion = 1
let g:neocomplete#auto_completion_start_length = 4
let g:neocomplete#use_vimproc = 1
let g:neocomplete#sources#buffer#cache_limit_size = 1000000
let g:neocomplete#sources#tags#cache_limit_size   = 30000000
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
   let g:neocomplete#sources#omni#input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.c  = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplete#sources#omni#input_patterns.cc = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::' 


" ----------------------------------------------- "
" End Neobundle Settings.
" ----------------------------------------------- "
